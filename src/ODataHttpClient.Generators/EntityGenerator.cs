using Microsoft.CodeAnalysis;
using System.Collections.Concurrent;
using System.Collections.Immutable;
using System.Linq;
using static ODataHttpClient.Generators.EdmParser;

namespace ODataHttpClient.Generators
{
    [Generator]
    public class EntityGenerator : IIncrementalGenerator
    {
        private const string TARGET_SUFFIX = "metadata.xml";
        internal static ConcurrentDictionary<string, string> SourceCodeRegistry = new ConcurrentDictionary<string, string>();
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var source = context.AdditionalTextsProvider
                .Where(file => file.Path.EndsWith(TARGET_SUFFIX))
                .Select((file, token) => file.GetText(token)?.ToString())
                .Collect();

            context.RegisterSourceOutput(source, Emit);
        }

        static void Emit(SourceProductionContext context, ImmutableArray<string> args)
        {
            static string DeclareProperty(Property property)
            {
                return $$"""
                public {{property.ClrType}} {{property.Name}} { get; set; }
                """;
            }

            foreach (var xml in args)
            {
                foreach (var ns in ParseEdmXml(xml))
                {
                    foreach (var type in ns.Classes)
                    {
                        var code = $$"""
                            // <auto-generated/>
                            #nullable disable
                            #pragma warning disable CS8600
                            #pragma warning disable CS8601
                            #pragma warning disable CS8602
                            #pragma warning disable CS8603
                            #pragma warning disable CS8604

                            namespace {{ns.Name}};

                            public partial class {{type.Name}}{{(type.BaseType != null ? $" : {type.BaseType}" : string.Empty)}}
                            {
                                {{string.Join("\n    ", type.Properties.Select(DeclareProperty))}}
                            }
                            """;
                        context.AddSource($"{ns.Name}.{type.Name}.ODataHttpClient.Generators.g.cs", code);
                        SourceCodeRegistry.AddOrUpdate($"{ns.Name}.{type.Name}", code, (k, v) => code);
                    }
                }
            }
        }
    }
}
